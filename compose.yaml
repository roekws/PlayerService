services:
  server:
    build:
      args:
        DB_HOST: ${DB_HOST}
        DB_PORT: ${DB_PORT}
        DB_NAME: ${DB_NAME}
        DB_USER: ${DB_USER}
        DB_PASSWORD: ${DB_PASSWORD}
        API_KEY: ${API_KEY}
        ASPNETCORE_URLS: ${ASPNETCORE_URLS}
        ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      context: .
      target: final
    ports:
      - 8080:80
      - 8443:443
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      API_KEY: ${API_KEY}
      ASPNETCORE_URLS: ${ASPNETCORE_URLS}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: .
  # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.5'
    #       memory: 512M

  db:
    image: postgres:16-alpine
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
